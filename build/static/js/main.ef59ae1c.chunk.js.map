{"version":3,"sources":["components/title.js","components/device.js","App.js","index.js"],"names":["Title","text","idx","Card","Header","Accordion","Toggle","as","Button","variant","eventKey","Device","device","editableItems","Collapse","Body","map","el","i","key","Object","keys","item","id","arrItem","itemId","elem","idEl","itemOutput","getNodeForEdit","obj2","arr","levelOne","levelTwo","entries","flat","levelTree","push","App","state","deviceTree","deviceTreeTypeMap","this","setState","json","api","className","console","log","defaultActiveKey","Component","ReactDOM","render","document","getElementById"],"mappings":"kSAgBeA,EAbD,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,IAClB,OACI,kBAACC,EAAA,EAAKC,OAAN,KACI,4BACI,kBAACC,EAAA,EAAUC,OAAX,CAAmBC,GAAIC,IAAQC,QAAQ,OAAOC,SAAUR,GACnDD,MCsBNU,EAfA,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,OAAQV,EAAwB,EAAxBA,IAAwB,EAAnBW,cAC1B,OACI,kBAACR,EAAA,EAAUS,SAAX,CAAqBJ,SAAUR,GAC3B,kBAACC,EAAA,EAAKY,KAAN,KACKH,EAAOI,KAAI,SAACC,EAAIC,GAAL,OAEX,wBAAIC,IAAKD,GAAIE,OAAOC,KAAKJ,GAAID,KAAI,SAACM,EAAMC,GAAP,OACjC,wBAAIJ,IAAKI,GAAKD,EAAd,MAnBE,SAAAA,GACf,MAAoB,iBAATA,EACAA,EAAKN,KAAI,SAACQ,EAASC,GAAV,OACf,wBAAIN,IAAKM,GAASL,OAAOC,KAAKG,GAASR,KAAI,SAACU,EAAMC,GAAP,OAChD,wBAAIR,IAAKQ,GAAOD,EAAhB,MAAyBF,EAAQE,WAItBJ,EAWyBM,CAAWX,EAAGK,e,eCdhDO,G,MAAiB,SAAAC,GACrB,IAAMC,EAAM,GAaZ,OAZAX,OAAOC,KAAKS,GAAMd,KAAI,SAAAgB,GACpBF,EAAKE,GAAUhB,KAAI,SAAAC,GACjBG,OAAOC,KAAKJ,GAAID,KAAI,SAAAiB,GAClBhB,EAAGgB,GAAUjB,KAAI,SAAAE,GACf,GAAoC,WAAhCE,OAAOc,QAAQhB,GAAGiB,OAAO,GAAiB,CAC5C,IAAMC,EAAYhB,OAAOc,QAAQhB,GAAGiB,OAAO,GAC3CJ,EAAIM,KAAK,CAACL,WAAUC,WAAUG,2BAMjCL,IAGYO,E,2MAEnBC,MAAQ,CACNC,WAAY,GACZC,kBAAmB,GACnB5B,cAAe,I,mFAIf6B,KAAKC,SAAS,CACZH,WAAYI,EAAKC,IAAIL,WACrBC,kBAAmBG,EAAKC,IAAIJ,kBAC5B5B,cAAegB,EAAee,EAAKC,IAAIJ,uB,+BAGhC,IAAD,EACiDC,KAAKH,MAAtDC,EADA,EACAA,WAA+B3B,GAD/B,EACY4B,kBADZ,EAC+B5B,eACvC,OACE,yBAAKiC,UAAU,aACZC,QAAQC,IAAIN,KAAKH,OAClB,uCACA,0CACA,kBAAClC,EAAA,EAAD,CAAW4C,iBAAiB,KACzB7B,OAAOC,KAAKmB,GAAYxB,KAAI,SAACJ,EAAQV,GAAT,OAC3B,kBAACC,EAAA,EAAD,CAAMgB,IAAKjB,GACT,kBAAC,EAAD,CAAOD,KAAMW,EAAQV,IAAKA,IAC1B,kBAAC,EAAD,CAAQU,OAAQ4B,EAAW5B,GAASV,IAAKA,EAAKW,cAAeA,c,GA1B1CqC,aCpBjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.ef59ae1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Accordion, Button } from \"react-bootstrap\";\r\n\r\nconst Title = ({text, idx}) => {\r\n    return (\r\n        <Card.Header>\r\n            <h2>\r\n                <Accordion.Toggle  as={Button} variant=\"link\" eventKey={idx}>\r\n                    {text}\r\n                </Accordion.Toggle>\r\n            </h2>\r\n\r\n        </Card.Header>\r\n    )\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\nimport { Accordion, Card } from \"react-bootstrap\";\r\n\r\nconst itemOutput = item => {\r\n    if (typeof(item) == 'object') {\r\n        return item.map((arrItem, itemId) => \r\n        (<ul key={itemId}>{Object.keys(arrItem).map((elem, idEl) => (\r\n    <li key={idEl}>{elem} : {arrItem[elem]}</li>\r\n        ))}</ul>)        \r\n        )\r\n    } else {\r\n        return item\r\n    }\r\n}\r\n\r\nconst Device = ({device, idx, editableItems}) => {\r\n    return (\r\n        <Accordion.Collapse  eventKey={idx}>\r\n            <Card.Body>\r\n                {device.map((el, i) => \r\n                   \r\n                (<ul key={i}>{Object.keys(el).map((item, id )=> \r\n                (<li key={id}>{item} : {itemOutput(el[item])}</li>))}\r\n                </ul>)\r\n                )}\r\n            </Card.Body>\r\n        </Accordion.Collapse>\r\n    )\r\n}\r\n\r\nexport default Device;\r\n","import React, { Component } from 'react';\nimport Title from './components/title';\nimport Device from './components/device';\nimport { Accordion, Card } from \"react-bootstrap\";\nimport './App.css';\nimport json from './api/api.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst getNodeForEdit = obj2 => {\n  const arr = [];\n  Object.keys(obj2).map(levelOne => {\n    obj2[levelOne].map(el => {\n      Object.keys(el).map(levelTwo => {\n        el[levelTwo].map(i => {\n          if (Object.entries(i).flat()[1] === 'number') {\n            const levelTree = Object.entries(i).flat()[0];\n            arr.push({levelOne, levelTwo, levelTree})\n          }\n        })\n      })\n    })\n  })\n  return arr\n}\n\nexport default class App extends Component {\n\n  state = {\n    deviceTree: {},\n    deviceTreeTypeMap: {},\n    editableItems: []\n  }\n\n  componentDidMount() {\n    this.setState({\n      deviceTree: json.api.deviceTree,\n      deviceTreeTypeMap: json.api.deviceTreeTypeMap,\n      editableItems: getNodeForEdit(json.api.deviceTreeTypeMap)\n    })\n  }\n  render () {\n    const { deviceTree, deviceTreeTypeMap, editableItems } = this.state;\n    return (\n      <div className=\"container\">\n        {console.log(this.state)}\n        <h1>Mapping</h1>\n        <h2>deviceTree</h2>\n        <Accordion defaultActiveKey='0'>\n          {Object.keys(deviceTree).map((device, idx) => (\n            <Card key={idx}>\n              <Title text={device} idx={idx}/>\n              <Device device={deviceTree[device]} idx={idx} editableItems={editableItems} />           \n            </Card>\n          ))}\n        </Accordion>\n        {/* <h2>deviceTreeTypeMap</h2>\n        <Accordion defaultActiveKey='0'>\n          {Object.keys(deviceTreeTypeMap).map((device, idx) => (\n            <Card key={idx}>\n              <Title text={device} idx={idx}/>\n              <Device device={deviceTreeTypeMap[device]} idx={idx} />           \n            </Card>\n          ))}\n        </Accordion> */}\n      </div>\n  );\n}\n  \n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}